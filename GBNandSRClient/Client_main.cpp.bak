
/*Header Files*/
#include <cstdlib>
#include <stdio.h>
#include<iostream>
#include <bitset>
#include <sstream>
#include <unistd.h>
#include<string.h>
#include<sys/socket.h>
#include<sys/time.h>
#include<arpa/inet.h>
#include<netdb.h>
#include<fstream>
#include<time.h>

struct dataSegment
{
    char sendChar;
    std::string checkSum;    
};

  std::string inputFile;
  static int portNumber,lostSeqnum;;
  int totalPackets;
/*This class contains variables, accessible to all the client functions*/
using namespace std;
class tcp_client{
    private:
    
    std::string address;
    int port;
    
     
public:
    struct sockaddr_in server;
    int sock;
    tcp_client();
    void gobackn(int segmentSize, int windowSize);
    int Send_Data_Segment(int sockClient,int clientWinSize,int seqnum,string sendDatastring,int pktlostRand, int chkerrRand);
    void Sending_Error();
    void Receiving_Error();
    bool conn(int);
    bool send_data(string command,string filePath,string data);
    string receive(int);
    
};
tcp_client::tcp_client()
{
    sock = -1;
    port = 0;
    address = "";
}

/**
 * 
 * @param address--client IP address, passed from main();
 * @param port--Port info from the main()
 * @return boolean value
 */
bool tcp_client::conn(int port)
{
    string address = "localhost";
    if(sock == -1)
    {
        //Create socket
        sock = socket(AF_INET , SOCK_DGRAM , 0);
        if (sock == -1)
        {
            perror("Could not create socket");
            exit(0);
        }
        cout<<"Socket created\n";
    }
    else    {   /* OK , nothing */  }
     //setting up address structure
    if(inet_addr(address.c_str()) == -1)
    {
        struct hostent *hostEntity;
        struct in_addr **addr_list;
        //resolves the host name;handles the errors
        if ( (hostEntity = gethostbyname( address.c_str() ) ) == NULL)
        {
            //gethostbyname failed
            herror("gethostbyname");
            cout<<"Failed to resolve hostname\n";  
            exit(0);
            return false;
        }
         
        //Cast the h_addr_list to in_addr , since h_addr_list also has the IP address in long format
        addr_list = (struct in_addr **) hostEntity->h_addr_list;
        for(int i = 0; addr_list[i] != NULL; i++)
        {
            server.sin_addr = *addr_list[i];
            cout<<address<<" resolved to "<<inet_ntoa(*addr_list[i])<<endl;
            break;
        }
    }
    //In case of a correct IP address format
    else
    {
        server.sin_addr.s_addr = inet_addr( address.c_str() );
    } 
    server.sin_family = AF_INET;
    server.sin_port = htons( port );
    
    //Connect to remote server and handle the error, if any
    /*if (connect(sock ,(struct sockaddr *)&server , sizeof(server)) < 0)
    {
        perror("connect failed. Error");
        close(sock);
        exit(0);
        return 1;
    }
     */   
    cout<<"Connected\n";
    return true;
}


/**
 * main() function of client
 * @param argc--takes integer value; gives the number of arguments
 * @param argv--double character pointer--has five parameters
 * executable file
     * Server IP address--client IP address
 * Port Number--should correlate with the server port to make a successful connection
 * Command--GET or PUT
 * File--file to send to server
 * @return integer value
 */
int main(int argc, char** argv) 
{
   //Check the number of parameters
    if (argc < 4) 
    {
        fprintf(stderr,"ERROR, One or more of 3 parameters missing!\n");
        exit(1);
    }
    //assign the parameters to local variables
  inputFile = argv[1];
  portNumber = atoi(argv[2]);
  totalPackets = atoi(argv[3]);
  tcp_client c;
  int i=0;
  ifstream inFile;
  string inputParam[5],protName,totalBits,timeOut,segSize;
  string winSize;
  inFile.open(inputFile);
  while(inFile>>inputParam[i])
  {
      if(i==0) 
      {
          protName=inputParam[0];
      }
      else if(i==1)
      {
          totalBits=inputParam[1];
      }
      else if(i==2)
      {
          winSize=inputParam[2];
      }
      else if(i==3)
      {
          timeOut=inputParam[3];
      }
      else if(i==4)
      {
          segSize=inputParam[4];
      }
      i++;
  }
  cout << "Input Parameter File: " << inputFile << endl;
  cout << "Port Number: " << portNumber << endl;
  cout << "Total Packets: " << totalPackets << endl;
  cout <<protName<<endl;
  cout <<totalBits<<endl;
  cout<<winSize<<endl;
  cout <<timeOut<<endl;
  cout <<segSize.c_str()<<endl;
  
  //connect to host
  c.conn(portNumber);
  cout<<"Sending Total number of packets,Protocol Name,Segment and Window size to Server"<<endl;
  if((sendto(c.sock,&totalPackets,sizeof(totalPackets),0,(struct sockaddr *) &c.server , sizeof(c.server)))<0)
        c.Sending_Error();
  
  if((sendto(c.sock,protName.c_str(),strlen(protName.c_str()),0,(struct sockaddr *) &c.server , sizeof(c.server)))<0)
        c.Sending_Error();
  
  if((sendto(c.sock,segSize.c_str(),strlen(segSize.c_str()),0,(struct sockaddr *) &c.server , sizeof(c.server)))<0)
        c.Sending_Error();
  
  if((sendto(c.sock,winSize.c_str(),strlen(winSize.c_str()),0,(struct sockaddr *) &c.server , sizeof(c.server)))<0)
        c.Sending_Error();
  
  cout<<"Sending "<<totalPackets<<" packets to Server through "<<protName<<" protocol"<<endl;
  if(protName == "GBN")
  {
       cout<<"This is GBN"<<endl;
       c.gobackn(stoi(segSize,nullptr,10),stoi(winSize,nullptr,10));
  }
  else if(protName == "SR")
       cout<<"This is SR"<<endl;
  else
  cout<<"Enter one of the following protocols: GBN or SR"<<endl;
          
  
  //send some data
  //c.send_data(command,filePath,"HTTP/1.1\r\n\r\n");
  //receive and echo reply
  cout<<"----------------------------\n\n";
  //cout<<c.receive(1024);
  cout<<"\n\n----------------------------\n\n";
  return 0;
}

void tcp_client::gobackn(int segmentSize, int windowSize)
{
    std::ifstream ifs("Textfile.txt");
    string sendData;
    sendData.assign((std::istreambuf_iterator<char>(ifs) ),(std::istreambuf_iterator<char>()));
    sendData.resize(totalPackets,'c');
    sendData.resize((sendData.size()-1),'\0');
    //string sendData="one of a series of subsections each usually devoted to one idea and each usually marked by the beginning";
    int packetSize=segmentSize/2;
    int i,flagIncrement;
    int winLast=windowSize;
    int seqnumClient=0,sf=0,sn=0,lastAcked=0,randPkt=-1,randChk=-1,prevlastAck=-1,ackCount=0;
    //struct dataSegment myData;
    char recvCharbuffer[7];
    
    
    socklen_t serverLength;
    serverLength=sizeof(server);
    cout << "Input Parameter File: " << inputFile << endl;
    cout << "Port Number: " << portNumber << endl;
    cout << "Total Packets: " << totalPackets << endl;
    
    
    int lostsyncFlag=0;
    /*for(i=0;i<totalPackets;i++)
    {
        */
        while(sn<windowSize)
        {
            sn=Send_Data_Segment(sock,windowSize,sn,sendData,randPkt,randChk);
        }
        
        while(lastAcked<(windowSize+1))
        {
            memset(recvCharbuffer, 0, sizeof(recvCharbuffer));
            int e=recvfrom(sock,recvCharbuffer, sizeof(recvCharbuffer), 0, (struct sockaddr *) &server , &serverLength);
            if( e<0)
                Receiving_Error();
            
            lastAcked=atoi((((string)recvCharbuffer).substr(4,(strlen(recvCharbuffer))-4)).c_str());
            cout<<"Last Acked Value is "<<lastAcked<<endl;
            lostsyncFlag=0;
            srand(time(0));
            randPkt=rand() % 5 + 17;//(windowSize+3) + (windowSize+2);
            srand(time(0));
            randChk=rand() % 5 + 27;//((3*windowSize)) + (3*windowSize);
            cout<<randPkt<<endl<<randChk<<endl;
           if(prevlastAck==lastAcked)
            {
                ackCount++;
                if(ackCount>=(windowSize-1))
                {
                    randPkt=-1,randChk=-1;
                    lostsyncFlag=1;
                    ackCount=0;
                    sn=lostSeqnum;
                    //lastAcked=lastAcked+1;
                    //prevlastAck=lastAcked;
                    //for(int lostLoop=lostSeqnum;lostLoop<winLast;lostLoop++)
                        //while()
                    {
                    cout<<"Packet "<<sn<<" is sent"<<endl;
                    sn=Send_Data_Segment(sock,windowSize,sn,sendData,randPkt,randChk);
                    cout<<"-------End of the Packet-------"<<endl;
                    }
                    //lastAcked=((lastAcked+windowSize)%(windowSize+1));
                    //continue;
                    
                }
                
            }
            prevlastAck=lastAcked;
            
            
            
            flagIncrement=0;
            flagIncrement=(lastAcked+1)-(sf%(windowSize+1));
            if(flagIncrement>0 && lostsyncFlag==0)
            {
                sf=sf+flagIncrement;
                winLast=winLast+flagIncrement;
            }
            while((sn<totalPackets) && ((sn >= sf)&&(sn < winLast)) && lostsyncFlag==0)
            {
                cout<<"Next Packet to be sent is "<<sn<<endl;
                sn=Send_Data_Segment(sock,windowSize,sn,sendData,randPkt,randChk);
                cout<<"-------End of the Packet-------"<<endl;
            }
        }
        
        
    //}
    
    cout<<endl<<segmentSize<<endl;
}

int tcp_client::Send_Data_Segment(int sockClient,int clientWinSize,int seqnum,string sendDatastring,int pktlostRand, int chkerrRand)
{
	int seqnumClient=0;
        
	const int compBits=8;
	char sendChar;
	string checkSum,totalDataPkt;
        string chkLost="^";
	
	if(sendDatastring[seqnum]== '\0')
	{
                cout<<"Packets sent"<<endl<<"********===========********"<<endl;
		cout<<"End of Packets"<<endl;
                cout<<"********===========********"<<endl;
		exit(0);
	}
        
        seqnumClient=seqnum%(clientWinSize+1);
	cout<<"Sending Packet "<<std::to_string(seqnumClient)<<" in the window"<<endl;
        
       if(seqnum==pktlostRand || seqnum==chkerrRand)
       {
            if(seqnum==pktlostRand)	
            {
                cout<<"Packet Lost for Packet: "<<seqnum<<endl;
                lostSeqnum=seqnum;
                seqnum++;
            }
        
            else if(seqnum==chkerrRand)
            {
                lostSeqnum=seqnum;
                std::bitset<compBits> binary=int(chkLost[0]);
                sendChar=sendDatastring[seqnum];
                checkSum=((~binary).to_string<char,std::string::traits_type,std::string::allocator_type>());
                totalDataPkt=sendDatastring[seqnum] + checkSum + (std::to_string(seqnumClient));
                cout<<"--------Checksum Error has occured----------"<<endl;
                cout<<"Data sent: "<<sendChar<<endl;
                //cout<<totalDataPkt.c_str()<<endl;
                //cout<<pktlostRand<<endl<<chkerrRand<<endl;
                int c=(sendto(sockClient,totalDataPkt.c_str(),strlen(totalDataPkt.c_str()),0,(struct sockaddr *) &server , sizeof(server)));
                if ( c < 0)
                    Sending_Error();
                seqnum++;
            }
        }
      else
        {
        std::bitset<compBits> binary=int(sendDatastring[seqnum]);
	sendChar=sendDatastring[seqnum];
	checkSum=((~binary).to_string<char,std::string::traits_type,std::string::allocator_type>());
	totalDataPkt=sendDatastring[seqnum] + checkSum + (std::to_string(seqnumClient));
        cout<<"Data sent: "<<sendChar<<endl;
        //cout<<totalDataPkt.c_str()<<endl;
        //cout<<pktlostRand<<endl<<chkerrRand<<endl;
        int c=(sendto(sockClient,totalDataPkt.c_str(),strlen(totalDataPkt.c_str()),0,(struct sockaddr *) &server , sizeof(server)));
        if ( c < 0)
            Sending_Error();
        seqnum++;
        }
	
	totalDataPkt="";    //initializing the string back to empty
	
	return seqnum;
}

void tcp_client::Sending_Error()
{
    perror("Data Sending failed. Error");
            cout<<errno<<endl;
            close(sock);
            exit(0);
}

void tcp_client::Receiving_Error()
{
    perror("Data Receiving failed. Error");
            cout<<errno<<endl;
            close(sock);
            exit(0);
}
